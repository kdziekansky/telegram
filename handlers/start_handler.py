from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from config import BOT_NAME, AVAILABLE_LANGUAGES
from utils.translations import get_text
from database.sqlite_client import get_or_create_user
from database.credits_client import get_user_credits

# Zabezpieczony import z awaryjnym fallbackiem
try:
    from utils.referral import use_referral_code
except ImportError:
    # Fallback je≈õli import nie zadzia≈Ça
    def use_referral_code(user_id, code):
        """
        Prosta implementacja awaryjnego fallbacku dla use_referral_code
        """
        # Je≈õli kod ma format REF123, wyodrƒôbnij ID polecajƒÖcego
        if code.startswith("REF") and code[3:].isdigit():
            referrer_id = int(code[3:])
            # Sprawd≈∫, czy u≈ºytkownik nie u≈ºywa w≈Çasnego kodu
            if referrer_id == user_id:
                return False, None
            # Dodanie kredyt√≥w zosta≈Çoby implementowane tutaj w prawdziwym przypadku
            return True, referrer_id
        return False, None

async def show_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Wy≈õwietla wyb√≥r jƒôzyka przy pierwszym uruchomieniu
    """
    # Utw√≥rz przyciski dla ka≈ºdego jƒôzyka
    keyboard = []
    for lang_code, lang_name in AVAILABLE_LANGUAGES.items():
        keyboard.append([InlineKeyboardButton(lang_name, callback_data=f"start_lang_{lang_code}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # U≈ºyj neutralnego jƒôzyka dla pierwszej wiadomo≈õci
    welcome_message = f"üåê Wybierz jƒôzyk / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup
    )

def get_user_language(context, user_id):
    """
    Pobiera jƒôzyk u≈ºytkownika z kontekstu lub bazy danych
    """
    # Sprawd≈∫, czy jƒôzyk jest zapisany w kontek≈õcie
    if 'user_data' in context.chat_data and user_id in context.chat_data['user_data'] and 'language' in context.chat_data['user_data'][user_id]:
        return context.chat_data['user_data'][user_id]['language']
    
    # Je≈õli nie, pobierz z bazy danych
    try:
        from database.sqlite_client import sqlite3, DB_PATH
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Zmieniamy z language_code na selected_language - to jest kluczowa zmiana
        cursor.execute("SELECT selected_language FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result and result[0]:
            # Zapisz w kontek≈õcie na przysz≈Ço≈õƒá
            if 'user_data' not in context.chat_data:
                context.chat_data['user_data'] = {}
            
            if user_id not in context.chat_data['user_data']:
                context.chat_data['user_data'][user_id] = {}
            
            context.chat_data['user_data'][user_id]['language'] = result[0]
            return result[0]
    except Exception as e:
        print(f"B≈ÇƒÖd pobierania jƒôzyka z bazy: {e}")
    
    # Domy≈õlny jƒôzyk, je≈õli nie znaleziono w bazie
    return None  # Zwracamy None zamiast "pl", ≈ºeby wymusiƒá wyb√≥r jƒôzyka

async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Obs≈Çuguje wyb√≥r jƒôzyka przez u≈ºytkownika
    """
    query = update.callback_query
    
    if not query.data.startswith("start_lang_"):
        return
    
    language = query.data[11:]  # Usu≈Ñ prefix "start_lang_"
    user_id = query.from_user.id
    
    print(f"Obs≈Çuga wyboru jƒôzyka: u≈ºytkownik {user_id} wybra≈Ç jƒôzyk {language}")
    
    # Zapisz jƒôzyk w bazie danych - w kolumnie selected_language
    try:
        from database.sqlite_client import sqlite3, DB_PATH
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Sprawd≈∫, czy u≈ºytkownik istnieje
        cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        user_exists = cursor.fetchone()
        
        if user_exists:
            # Aktualizuj istniejƒÖcego u≈ºytkownika
            cursor.execute("UPDATE users SET selected_language = ? WHERE id = ?", (language, user_id))
        else:
            # Dodaj nowego u≈ºytkownika (to te≈º powinno byƒá obs≈Çu≈ºone przez get_or_create_user)
            cursor.execute("INSERT INTO users (id, selected_language) VALUES (?, ?)", (user_id, language))
        
        conn.commit()
        conn.close()
        print(f"Jƒôzyk {language} zapisany w bazie danych dla u≈ºytkownika {user_id}")
    except Exception as e:
        print(f"B≈ÇƒÖd zapisywania jƒôzyka: {e}")
    
    # Zapisz jƒôzyk w kontek≈õcie
    if 'user_data' not in context.chat_data:
        context.chat_data['user_data'] = {}
    
    if user_id not in context.chat_data['user_data']:
        context.chat_data['user_data'][user_id] = {}
    
    context.chat_data['user_data'][user_id]['language'] = language
    
    # Pobierz stan kredyt√≥w
    credits = get_user_credits(user_id)
    
    # Przygotowanie wiadomo≈õci powitalnej
    welcome_text = get_text("welcome_message", language, bot_name=BOT_NAME, credits=credits)
    
    # Dodajemy menu inline do wiadomo≈õci powitalnej
    from handlers.menu_system import build_main_menu
    reply_markup = build_main_menu(language)
    
    try:
        # Aktualizuj wiadomo≈õƒá
        await query.edit_message_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        print(f"Wiadomo≈õƒá powitalna zosta≈Ça zaktualizowana dla u≈ºytkownika {user_id}")
    except Exception as e:
        print(f"B≈ÇƒÖd podczas aktualizacji wiadomo≈õci: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Obs≈Çuga komendy /start
    Tworzy lub pobiera u≈ºytkownika z bazy danych i wy≈õwietla wiadomo≈õƒá powitalnƒÖ
    """
    user = update.effective_user
    
    # Pobierz lub utw√≥rz u≈ºytkownika w bazie danych
    user_data = get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code
    )
    
    # Sprawd≈∫, czy istnieje kod referencyjny w argumencie start
    if context.args and len(context.args) > 0:
        start_param = context.args[0]
        
        # Obs≈Çuga kodu referencyjnego (format: ref_XXXXX)
        if start_param.startswith("ref_"):
            ref_code = start_param[4:]
            success, referrer_id = use_referral_code(user.id, ref_code)
            
            if success:
                # U≈ºywamy domy≈õlnego jƒôzyka dla komunikatu o kodzie referencyjnym
                await update.message.reply_text(
                    get_text("referral_success", "pl", credits=25),
                    parse_mode=ParseMode.MARKDOWN
                )
    
    # Pobierz jƒôzyk z bazy danych - z kolumny selected_language
    selected_language = None
    try:
        from database.sqlite_client import sqlite3, DB_PATH
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT selected_language FROM users WHERE id = ?", (user.id,))
        result = cursor.fetchone()
        conn.close()
        
        if result and result[0]:
            selected_language = result[0]
    except Exception as e:
        print(f"B≈ÇƒÖd pobierania jƒôzyka z bazy: {e}")
    
    # Je≈õli u≈ºytkownik nie ma jeszcze wybranego jƒôzyka, poka≈º wyb√≥r jƒôzyka
    if not selected_language:
        return await show_language_selection(update, context)
    
    # Zapisz jƒôzyk w kontek≈õcie
    if 'user_data' not in context.chat_data:
        context.chat_data['user_data'] = {}
    
    if user.id not in context.chat_data['user_data']:
        context.chat_data['user_data'][user.id] = {}
    
    context.chat_data['user_data'][user.id]['language'] = selected_language
    
    # Pobierz stan kredyt√≥w
    credits = get_user_credits(user.id)
    
    # Przygotowanie wiadomo≈õci powitalnej
    welcome_text = get_text("welcome_message", selected_language, bot_name=BOT_NAME, credits=credits)
    
    # Dodajemy menu inline do wiadomo≈õci powitalnej
    from handlers.menu_system import build_main_menu
    reply_markup = build_main_menu(selected_language)
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )